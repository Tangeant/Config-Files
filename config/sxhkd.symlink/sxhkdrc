# bspwm hotkeys
#
# Cleanly quit/reload bspwm
super + shift + {x,q}
	bspc {quit,wm -r}

# Make sxhkd reload its configuration
super + Escape
	pkill -USR1 -x sxhkd

#
# Window manipulation
# ______________

# close and kill
super + {x,q}
	bspc node -{c,k}

#
# state/flags
#

# set the window state
super + {t,shift + t,f, shift + f}
	bspc node -t {tiled,pseudo_tiled,fullscreen,floating}

# set the node flags (private means keep size and position of window)
super + ctrl + {m,o, i}
	bspc node -g {marked,private, hidden}

#Unhide nodes
super + alt + i
   bspc node {,$(bspc query -N -n .hidden | tail -n1)} -g hidden=off -f --follow

# alternate between the tiled and monocle layout
super + space
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + shift + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest node
super + g
	bspc node -s biggest

# Force all windows of the desktop to tile
super + ctrl + t
	bspcp tile

# Force all windows of the desktop to float and arrange them
super + ctrl + shift + t
	bspcp float

# Make window sticky
super + s
	bspc node -g sticky

# Lock a window from closing
super + a
	bspc node -g locked

#
# Window moving and splitting
# ______________

# Autopresel (split window in its largest dimension)
super + ctrl + Return
	auto-presel

ctrl + space
	auto-presel

# Presel window for splitting in certain direction
super + ctrl + {h,j,k,l}
	bspc node -p \~{west,south,north,east}

alt + ctrl + {Left,Down,Up,Right}
	bspc node -p \~{west,south,north,east}

# Presel the desktop for splitting in certain direction
alt + shift + {h,j,k,l}
	# bspc node @/ -p \~{west,south,north,east}

alt + shift + {Left,Down,Up,Right}
	# bspc node @/ -p \~{west,south,north,east}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

# Set splitting ratio of windows
alt + ctrl + {1-9}
	bspc node -o 0.{1-9}

# focus the node for the given path jump
super + {y,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# Select previous / next desktop
super + {c,v}
	bspc desktop -f {prev.occupied,next.occupied}

# cycle windows
super + {_,shift + }Tab
    bspc node -f {next,prev}

#Focus and move windows by direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the next/previous node in the current desktop
super + {_,shift + }n
	bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
alt + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

#focus and send specific desktop on a given monitor
alt + m ; {1-2} ; {1-9,0}
  bspc desktop -f ^{1-2}:^{1-9,10}

#Send to given desktop on given monitor
alt + m ; shift + {1-2} ; {1-9,0}
  bspc node -d ^{1-2}:^{1-9,10}

#
# Layout manipulation/desktop level controls
# ______________

# Balance tree
super + shift + b
	bspc node @/ -B

# Balance brother node. If you do this on biggest window of the desktop, it usually means balancing all windows with except the biggest.
super + alt + b
	bspc node @brother -B

# Undo balancing (equalize windows)
super + ctrl + b
	bspc node @/ -E

# Toggle automatic balancing of windows
#alt + b
#	euclid_balancer

# Mirror and flip leaves of tree
super + {equal,minus}
	bspc node @/ -F {horizontal,vertical}

# Rotate leaves of tree
super + shift + {comma,period}
	bspc node @/ -R {90,270}

# Circulate nodes in tree
super + {slash,shift + slash}
    bspc node -C {forward,backward}

#Swap desktop between monitors
ctrl + alt + {comma,period}
    bspc desktop --swap next.active {next,last} --follow

#Move desktop to next monitor
super + ctrl+ {comma,period}
    bspc desktop -m {next,last} --follow

#Send node to next monitor
super + alt + {comma,period}
    bspc node -m {next,prev} --follow

#Change window gap

super + shift + g
	bspc config -d focused window_gap {$gap,$(($gap+$gap)),$(($gap+$gap+$gap))}

super + button{4,5}
	bspc config -d focused window_gap $((`bspc config -d focused window_gap` {+,-} 2 ))

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}

#
# mouse bindings
# __________________

~button1
	DidIClickDesktop.sh && gapgrab

~button2
	DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/BspwmDesktopMenui
#DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/BspwmWindowMenui

~button3
	DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/LaunchMenu

# Switch workspace by scrolling on the desktop. Causes scrolling issues on some systems.
#~button4
#	DidIClickDesktop.sh && bspc desktop -f next
#~button5
#	DidIClickDesktop.sh && bspc desktop -f prev

### Add or remove desktops by scrolling
super + ctrl + button5
    bspcp dsktp rm

super + ctrl + button4
    bspcp dsktp add

# Spawn applications popup menu and manually tile selected
# app where your mouse was when you opened the menu. Smartsplit only chooses
# biggest dimension of the window, MouseLaunch only cares which edge is closer.
# mod5 is alt_gr (first key right from space) on most keyboards.
mod5 + @button1
    MouseLaunch ; mygtkmenui -- .config/GTKmenu/LaunchMenu
#	smartsplit ; dboxmenu

# Spawn window manipulation menu
# Mod1 is alt
#    BspwmWindowMenu
#mod1 + @button1
#    mygtkmenui -- .config/GTKmenu/BspwmWindowMenui

#edit this file
alt + ctrl + space
	$GUI_EDITOR ~/.config/sxhkd/sxhkdrc

# Remove receptacles
super + BackSpace
  for i in $(bspc query -N -n .leaf.!window.local); do bspc node $i -k; done
